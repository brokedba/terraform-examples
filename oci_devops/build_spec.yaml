version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands

  vaultVariables:
  #  EXAMPLE_SECRET: "YOUR-SECRET-OCID"
    SSH_PUB_KEY: ${ssh_key_sec}
    compartment_ocid: ${compartment_ocid_sec}

  # exportedVariables are made available to use as parameters in successor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - OBJECT_BUCKET_NAMESPACE_NAME
    - OBJECT_BUCKET_NAME
    - TF_VAR_compartment_ocid
    - TF_VAR_region

#     cp -R ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR} .

steps:
  - type: Command
    name: "Display all folders"
    timeoutInSeconds: 40
    command: |
      ls -ltr ${OCI_PRIMARY_SOURCE_DIR}
  - type: Command
    timeoutInSeconds: 600
    name: "load and modify the original stack and load into storage Bucket"
    command: |
      echo "In to Path - ${TF_PROVIDER_PATH}/${TF_STACK_DIR}"
      export OBJECT_BUCKET_NAMESPACE_NAME=${BUCKET_NAMESPACE_NAME}
      export OBJECT_BUCKET_NAME=${BUCKET_NAME}
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      echo "remove original provider section"
      sed -i -e '14,20d;27,29d;/^variable "tenancy_ocid"/d' variables.tf
      sed -i -e 's/file(var.ssh_public_key)/var.ssh_public_key/g' compute.tf
      echo "add new provider based on the principal authentication"
      cat <<EOF >provider.tf
      provider "oci" {
      auth = "ResourcePrincipal"
      region = "${REGION}"
      }
      EOF

  - type: Command
    timeoutInSeconds: 600
    name: "terraform init"
    command: |
      echo "pwd into ${TF_STACK_DIR}"     
      ls  ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      terraform init 
      terraform fmt
      echo "upload configurationand provider pluggin into a bucket"
      oci os object bulk-upload -ns ${BUCKET_NAMESPACE_NAME} -bn ${BUCKET_NAME} --src-dir . --overwrite --region ${REGION} --content-type auto --object-prefix "terraform_build/"

  - type: Command
    timeoutInSeconds: 600
    name: "terraform validate"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR} 
      cat provider.tf 
      terraform validate

  - type: Command
    timeoutInSeconds: 600
    name: "terraform plan"
    command: |
      echo " check the execution plan"
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR} 
      export TF_VAR_region="${REGION}"
      export TF_VAR_compartment_ocid="${compartment_ocid}"
      export TF_VAR_ssh_public_key=${SSH_PUB_KEY}      
      echo "ssh public key => ${TF_VAR_ssh_public_key} "
      terraform plan -out=instance.tfplan   
      oci os object put -ns ${BUCKET_NAMESPACE_NAME} -bn ${BUCKET_NAME} --file instance.tfplan --content-type auto --name "terraform_build/instance.tfplan" --force      
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

# outputArtifacts:
#   - name: terraform_plan
#     type: BINARY
#     location: ${OCI_PRIMARY_SOURCE_DIR}/instance.tfplan 
  