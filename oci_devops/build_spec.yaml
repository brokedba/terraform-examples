version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands

  vaultVariables:
  #  EXAMPLE_SECRET: "YOUR-SECRET-OCID"
    #  aws_access_key_id: ocid1.vaultsecret.oc1.iad.xxxx
    #  aws_secret_access_key: ocid1.vaultsecret.oc1.iad.yyyy
    #  ACCESS_KEY: "[ACCESS_KEY_VAULT_SECRET_OCID]"
    #  SECRET_KEY: "[SECRET_KEY_VAULT_SECRET_OCID]"
  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - OBJECT_BUCKET_NAMESPACE_NAME
    - OBJECT_BUCKET_NAME

#     cp -R ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}    .

steps:
  - type: Command
    name: "Display all folders"
    timeoutInSeconds: 40
    command: |
      ls -ltr ${OCI_PRIMARY_SOURCE_DIR}
  - type: Command
    timeoutInSeconds: 600
    name: "load and modify the original stack and load into storage Bucket"
    command: |
      echo "In to Path - ${TF_PROVIDER_PATH}/${TF_STACK_DIR}"
      export OBJECT_BUCKET_NAMESPACE_NAME=${BUCKET_NAMESPACE_NAME}
      export OBJECT_BUCKET_NAME=${BUCKET_NAME}
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      echo "remove original provider section"
      sed -i -e '14,20d' variables.tf
      sed -i '/^variable "private_key_path"/d' variables.tf
      sed -i -e 's/file(var.ssh_public_key)/var.ssh_public_key/g' compute.tf
      echo "add new provider based on the principal authentication"
      cat <<EOF >provider.tf
      provider "oci" {
      auth = "ResourcePrincipal"
      region = "${OCI_REGION}"
      }
      EOF
      echo "upload into a bucket"
      oci os object bulk-upload -ns ${BUCKET_NAMESPACE_NAME} -bn ${BUCKET_NAME} --src-dir . --overwrite --region ${OCI_REGION} --content-type auto --object-prefix "terraform_build/"
  - type: Command
    timeoutInSeconds: 600
    name: "terraform init"
    command: |
      echo "pwd into ${TF_STACK_DIR}"     
      ls  ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR}
      terraform init 
      terraform fmt
  - type: Command
    timeoutInSeconds: 600
    name: "terraform validate"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR} 
      cat provider.tf 
      terraform validate
  - type: Command
    timeoutInSeconds: 600
    name: "terraform plan"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/${TF_PROVIDER_PATH}/${TF_STACK_DIR} 
      echo " check the execution plan"
      export TF_VAR_region="${OCI_REGION}"
      export TF_VAR_ssh_public_key=${ssh_public_key_1}${ssh_public_key_2}
      echo "ssh public key => ${TF_VAR_ssh_public_key} "
      export TF_VAR_private_key_path='./oci_key.pem'
      terraform plan  -out=${OCI_PRIMARY_SOURCE_DIR}/instance.tfplan   
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

# outputArtifacts:
#   - name: terraform_plan
#     type: BINARY
#     location: ${OCI_PRIMARY_SOURCE_DIR}/instance.tfplan 
  