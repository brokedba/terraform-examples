name: 'Terraform_oci_vcn'

on:
  push:
    branches: [ "git_actions" ]
    paths:
      - 'terraform-provider-oci/create-vcn/*tf'         
env:
  TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}  
  TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
  TF_VAR_private_key: ${{ secrets.PRIVATE_KEY }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  TF_VAR_compartment_ocid: ${{ secrets.USER_OCID }}
  TF_VAR_fingerprint: ${{ secrets.FINGERPRINT }}
  TF_VAR_region: ${{ vars.TF_VAR_region }}
  STACK_DIR: ${{ vars.TF_STACK_DIR }}
  
#defaults:
 #run:
 
# permissions:
#  contents: read

jobs:
  terraform_setup:
    name: 'Terraform_setup [Init- Format - Validate]'
    runs-on: ubuntu-latest
    environment: oci-labs
  # Use default shell and working directory regardless of the os of the GitHub Actions runner 
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.STACK_DIR }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.3
        terraform_wrapper: false
           # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} --> Terraform cloud
    
    # Create a cache for the terraform pluggin 
    - name: Config Terraform plugin cache
      run: |
        echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
        mkdir --parents ~/.terraform.d/plugin-cache
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          $RUNNER_TEMP
          ./*
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-                
     
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        echo ====== INITIALIZE terraform provider plugins : $GITHUB_WORKSPACE/${{ vars.TF_STACK_DIR }} ======
        pwd
        which terraform
        echo  terra_path=`which terraform` >> "$GITHUB_OUTPUT"
        echo the temp directory path is : $RUNNER_TEMP
        # cd $GITHUB_WORKSPACE/$STACK_DIR
        terraform init
        terraform -v 
    - name: Terraform format
      run: |
        echo  ====== FORMAT the Terraform configuration in ${{ env.STACK_DIR }}  ======
        terraform fmt  
    - name: Terraform Validate
      run: |
        echo  ====== VALIDTAE the Terraform configuration in ${{ env.STACK_DIR }}  ======
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        echo  ====== PLAN execution for the Terraform configuration in ${{ env.STACK_DIR }}  ======
        terraform plan -input=false -no-color -out tf.plan

  Terraform_Apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: oci-labs
    needs: [terraform_setup]
  # Use default shell and working directory regardless of the os of the GitHub Actions runner 
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.STACK_DIR }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Create a cache for the terraform pluggin 
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          $RUNNER_TEMP
          ./*
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-     
  # Configure terraform pluggin in the new runner                          
    - name: Config Terraform plugin cache
      run: |
        echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
        mkdir --parents ~/.terraform.d/plugin-cache
   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        echo ====== INITIALIZE terraform provider plugins : $GITHUB_WORKSPACE/${{ vars.TF_STACK_DIR }} ======
        pwd
        which terraform
        ls tf.plan
        TERRAPATH="${{ needs.terraform_setup.outputs.terra_path }}"
        echo $TERRAPATH
        cp $TERRAPATH /usr/bin/
        which terraform
        echo the temp directory path is : $RUNNER_TEMP
        # cd $GITHUB_WORKSPACE/$STACK_DIR
        terraform init
        terraform -v           
